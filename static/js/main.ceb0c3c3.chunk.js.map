{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Game","props","initialState","flashCard","actualCardValue","hits","previousHits","hitsCanChange","miss","levels","selectedLevel","currentClick","hitsToWin","missesToLose","done","start","state","gameHandler","bind","startGame","stopGame","generateCard","clearInterval","this","interval","document","addEventListener","event","preventDefault","setInterval","setState","button","console","log","removeEventListener","cards","randomNum","Math","floor","random","setTimeout","className","onClick","JSON","stringify","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ceb0c3c3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = { \n      flashCard: \"\",\n      actualCardValue: \"\",\n      hits: 0,\n      previousHits: 0,\n      hitsCanChange: true,\n      miss: -1,\n      levels: [5000, 2000, 1200, 700],\n      selectedLevel: 1200,\n      currentClick: \"\",\n\n      hitsToWin: 5,\n      missesToLose: 5,\n\n      done: \"Start Game\",\n      start: false\n    };\n    this.state = this.initialState;\n\n    this.gameHandler = this.gameHandler.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.stopGame = this.stopGame.bind(this);\n    this.generateCard = this.generateCard.bind(this);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  startGame() {\n    document.addEventListener('mousedown', this.gameHandler)\n    document.addEventListener('contextmenu', event => {\n      event.preventDefault();\n    })\n    this.interval = setInterval(() => {\n      this.generateCard()\n    }, this.state.selectedLevel);\n\n    this.setState({\n      ...this.initialState,\n      done: this.state.done,\n      start: true\n    })\n  }\n\n  gameHandler(event) {\n    let currentClick;\n      let hits = this.state.hits, previousHits = !this.state.hitsCanChange ? this.state.previousHits : this.state.hits;\n      if(event.button === 0) currentClick = \"left\";\n      if(event.button === 2) currentClick = \"right\";\n      if(currentClick === this.state.actualCardValue && this.state.hitsCanChange) {\n        ++hits;   \n      } else {\n        currentClick = this.state.currentClick;\n      }\n      this.setState(state => ({\n        currentClick,\n        hits,\n        previousHits,\n        hitsCanChange: false,\n        done: hits === this.state.hitsToWin ? \"You WON!! Restart Game\" : null,\n        start: false\n      }), () => {\n        console.log(\"this.state.actualCardValue \" + this.state.actualCardValue);\n        console.log();\n        console.log(\"this.state.currentClick \" + this.state.currentClick);\n        console.log(\"*******************\");\n      });\n  }\n\n  stopGame() {\n    console.log(\"Stop Game called\")\n    document.removeEventListener('mousedown', this.gameHandler);\n    clearInterval(this.interval);\n  }\n\n  generateCard() {\n    const cards = [\"left\", \"right\"];\n    const randomNum = Math.floor(Math.random()*100);\n    let flashCard = \"\";\n    if(randomNum < 50)\n      flashCard = cards[0];\n    else \n      flashCard = cards[1];\n\n    this.setState(state => ({\n      flashCard: \"flash\",\n      hitsCanChange: false,\n      miss: state.previousHits === state.hits ? state.miss + 1 : state.miss,\n      done: state.miss + 1 === state.missesToLose ? \"Try Again :) Restart Game\" : null,\n      start: false\n    }));\n\n    setTimeout(() => {\n      this.setState(state => ({\n        flashCard: flashCard,\n        hitsCanChange: true,\n        previousHits: state.hits,\n        actualCardValue: flashCard\n      }));\n    }, 200)\n  }\n  render() {\n    if(this.state.done !== null && this.state.start === false) {\n      this.stopGame();\n    }\n    return (\n      <div>\n        <div>\n          <div className={\"rightText\"}>\n              Hits To Win : {this.state.hitsToWin}\n          </div>\n          <div className={\"rightText\"}>\n              Misses To Lose : {this.state.hitsToWin}\n          </div>\n        </div>\n        {this.state.done !== null \n        ? \n        <button className={\"done-button\"} onClick = {this.startGame}>\n          {this.state.done}\n        </button>\n        : \n        <div className = {\"game-pane\"}>\n            <div>\n              Card: {this.state.flashCard}\n            </div>\n\n            <div>\n              Hits: {this.state.hits}\n            </div>\n\n            <div>\n              Miss: {this.state.miss === -1 ? 0 : this.state.miss}\n            </div>\n\n            <div>\n              Levels: {JSON.stringify(this.state.levels)}\n            </div>\n\n            <div>\n              Selected Level: {this.state.selectedLevel}\n            </div>\n\n            <div>\n              Current Click: {this.state.currentClick}\n            </div>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}